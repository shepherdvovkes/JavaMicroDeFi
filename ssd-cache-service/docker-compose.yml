version: '3.8'

services:
  ssd-cache-service:
    build: .
    container_name: ssd-cache-service
    ports:
      - "8088:8088"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=defimon123
      - MONGODB_URI=mongodb://admin:defimon123@mongodb:27017/cache_metrics?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SSD_CACHE_ENABLED=true
      - SSD_CACHE_SIZE=2147483648  # 2GB
      - MEMORY_CACHE_SIZE=268435456  # 256MB
      - CACHE_TTL_HOT=60
      - CACHE_TTL_WARM=3600
      - CACHE_TTL_COLD=86400
      - CACHE_EVICTION_STRATEGY=LRU
      - CACHE_OPTIMIZATION_ENABLED=true
      - CACHE_OPTIMIZATION_INTERVAL=300
      - BLOCKCHAIN_ETHEREUM_ENABLED=true
      - BLOCKCHAIN_ETHEREUM_CACHE_BLOCKS=true
      - BLOCKCHAIN_ETHEREUM_CACHE_TRANSACTIONS=true
      - DATA_AGGREGATION_CACHE_ENABLED=true
      - DATA_AGGREGATION_PRICE_CACHE_SIZE=10000
      - DATA_AGGREGATION_OHLCV_CACHE_SIZE=5000
      - DATA_AGGREGATION_MARKET_CACHE_SIZE=20000
    volumes:
      - /opt/ssd-cache:/opt/ssd-cache
      - /var/log/ssd-cache:/var/log/ssd-cache
      - /sys/block:/sys/block:ro
    privileged: true
    devices:
      - /dev/nvme0n1:/dev/nvme0n1
    restart: unless-stopped
    depends_on:
      - redis
      - mongodb
      - kafka
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/api/cache/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: cache-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass defimon123 --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7
    container_name: cache-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=defimon123
    volumes:
      - mongodb-data:/data/db
      - ./mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    restart: unless-stopped
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: cache-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: cache-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    restart: unless-stopped
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: cache-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: cache-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  cache-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

