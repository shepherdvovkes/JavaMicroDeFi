server:
  port: 8087
  servlet:
    context-path: /

spring:
  application:
    name: ethereum-prediction-service
  
  profiles:
    active: dev
  
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://admin:defimon123@localhost:27017/prediction?authSource=admin}
      auto-index-creation: true
  
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:defimon123}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ethereum-prediction-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      cache-null-values: false

# External API Configuration
external-apis:
  coingecko:
    api-key: ${COINGECKO_API_KEY:}
    base-url: https://api.coingecko.com/api/v3
    rate-limit: 50 # requests per minute
  
  coinmarketcap:
    api-key: ${COINMARKETCAP_API_KEY:}
    base-url: https://pro-api.coinmarketcap.com/v1
    rate-limit: 100 # requests per month
  
  etherscan:
    api-key: ${ETHERSCAN_API_KEY:}
    base-url: https://api.etherscan.io/api
    rate-limit: 5 # requests per second
  
  twitter:
    api-key: ${TWITTER_API_KEY:}
    base-url: https://api.twitter.com/2
    rate-limit: 300 # requests per 15 minutes
  
  reddit:
    api-key: ${REDDIT_API_KEY:}
    base-url: https://oauth.reddit.com
    rate-limit: 60 # requests per minute
  
  news:
    api-key: ${NEWS_API_KEY:}
    base-url: https://newsapi.org/v2
    rate-limit: 1000 # requests per day
  
  fred:
    api-key: ${FRED_API_KEY:}
    base-url: https://api.stlouisfed.org/fred
    rate-limit: 120 # requests per minute
  
  alphavantage:
    api-key: ${ALPHAVANTAGE_API_KEY:}
    base-url: https://www.alphavantage.co/query
    rate-limit: 5 # requests per minute
  
  defillama:
    api-key: ${DEFILLAMA_API_KEY:}
    base-url: https://api.llama.fi
    rate-limit: 100 # requests per minute
  
  dune:
    api-key: ${DUNE_API_KEY:}
    base-url: https://api.dune.com/api/v1
    rate-limit: 1000 # requests per hour

# Prediction Model Configuration
prediction:
  models:
    technical-analysis:
      enabled: true
      weight: 0.3
      indicators:
        rsi-period: 14
        macd-fast: 12
        macd-slow: 26
        macd-signal: 9
        bollinger-period: 20
        bollinger-std: 2
        sma-periods: [20, 50, 200]
        ema-periods: [12, 26]
    
    sentiment-analysis:
      enabled: true
      weight: 0.25
      sources:
        twitter: true
        reddit: true
        news: true
      confidence-threshold: 0.6
    
    macro-economic:
      enabled: true
      weight: 0.15
      indicators:
        dxy: true
        vix: true
        fed-funds-rate: true
        inflation: true
        unemployment: true
        treasury-yields: true
    
    defi-analytics:
      enabled: true
      weight: 0.2
      metrics:
        total-value-locked: true
        lending-volume: true
        dex-volume: true
        staking-rewards: true
        yield-farming-apy: true
    
    ensemble:
      enabled: true
      weight: 0.1
      method: weighted-average
  
  time-horizons:
    short-term: 1h
    medium-term: 24h
    long-term: 7d
    extended: 30d
  
  confidence-thresholds:
    high: 0.8
    medium: 0.6
    low: 0.4

# Data Collection Configuration
data-collection:
  intervals:
    market-data: 30s
    on-chain-metrics: 60s
    sentiment-data: 300s
    technical-indicators: 60s
    macro-economic: 3600s
    defi-metrics: 300s
  
  batch-size: 1000
  retry-attempts: 3
  retry-delay: 5000ms

# Monitoring Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms

# Logging Configuration
logging:
  level:
    com.defimon.prediction: INFO
    org.springframework.kafka: WARN
    org.springframework.data.mongodb: WARN
    org.springframework.web.reactive.function.client: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/ethereum-prediction-service.log

# Security Configuration
security:
  cors:
    allowed-origins: "*"
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: false

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  data:
    mongodb:
      uri: mongodb://admin:defimon123@localhost:27017/prediction_dev?authSource=admin

logging:
  level:
    com.defimon.prediction: DEBUG
    org.springframework.web.reactive.function.client: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  data:
    mongodb:
      uri: ${MONGODB_URI}
  
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    password: ${REDIS_PASSWORD}

logging:
  level:
    com.defimon.prediction: INFO
    root: WARN
  file:
    name: /var/log/ethereum-prediction-service/application.log

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  
  data:
    mongodb:
      uri: mongodb://admin:defimon123@mongodb:27017/prediction?authSource=admin
  
  redis:
    host: redis
    port: 6379
    password: defimon123
  
  kafka:
    bootstrap-servers: kafka:29092

external-apis:
  coingecko:
    api-key: ${COINGECKO_API_KEY}
  coinmarketcap:
    api-key: ${COINMARKETCAP_API_KEY}
  etherscan:
    api-key: ${ETHERSCAN_API_KEY}
