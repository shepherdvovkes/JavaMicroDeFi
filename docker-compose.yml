version: '3.8'

services:
  # Apache Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - defimon-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - defimon-network

  # MongoDB for chain data storage
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: defimon123
      MONGO_INITDB_DATABASE: chaindata
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - defimon-network

  # API Gateway (Spring Cloud Gateway)
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - kafka
    networks:
      - defimon-network

  # Blockchain Synchronization Service (Rust)
  blockchain-sync:
    build: ./blockchain-sync-service
    container_name: blockchain-sync
    ports:
      - "9090:9090"  # Prometheus metrics port
    environment:
      - KAFKA_BROKERS=kafka:29092
      - MONGODB_URI=mongodb://admin:defimon123@mongodb:27017/chaindata?authSource=admin
      - ETH_RPC_URL=http://host.docker.internal:8545
      - METRICS_ADDR=0.0.0.0:9090
      - RUST_LOG=info
      - BLOCKCHAIN_DATA_PATH=/mnt/blockchain-disk
    volumes:
      - /mnt/blockchain-disk:/mnt/blockchain-disk:ro
    depends_on:
      - kafka
      - mongodb
    networks:
      - defimon-network

  # Transaction Signing Service (Rust)
  transaction-signing:
    build: ./transaction-signing-service
    container_name: transaction-signing
    ports:
      - "8082:8082"  # API port
    environment:
      - KAFKA_BROKERS=kafka:29092
      - RUST_LOG=info
    depends_on:
      - kafka
    networks:
      - defimon-network

  # Math Computing Service (Rust)
  math-computing:
    build: ./math-computing-service
    container_name: math-computing
    ports:
      - "8083:8083"  # API port
    environment:
      - KAFKA_BROKERS=kafka:29092
      - RUST_LOG=info
    depends_on:
      - kafka
    networks:
      - defimon-network

  # Data Aggregation Service (Rust)
  data-aggregation:
    build: ./data-aggregation-service
    container_name: data-aggregation
    ports:
      - "8084:8084"  # API port
    environment:
      - KAFKA_BROKERS=kafka:29092
      - MONGODB_URI=mongodb://admin:defimon123@mongodb:27017/chaindata?authSource=admin
      - RUST_LOG=info
    depends_on:
      - kafka
      - mongodb
    networks:
      - defimon-network

  # Simple Rust Metrics Service (for testing)
  simple-metrics:
    build: ./simple-rust-metrics-service
    container_name: simple-metrics
    ports:
      - "8090:8080"  # API port
    networks:
      - defimon-network

  # Ethereum Rust Sync Engine (High-Performance Data Processing) - DISABLED
  # ethereum-rust-engine:
  #   build: ./ethereum-rust-engine
  #   container_name: ethereum-rust-engine
  #   ports:
  #     - "8086:8086"  # API port
  #   environment:
  #     - ETH_RPC_URL=http://host.docker.internal:8545
  #     - MONGODB_URI=mongodb://admin:defimon123@mongodb:27017/ethereum?authSource=admin
  #     - RUST_LOG=info
  #     - BLOCKCHAIN_DATA_PATH=/mnt/blockchain-disk
  #     - MULTICHAIN_SERVICE_URL=http://multi-chain-service:8085
  #   volumes:
  #     - /mnt/blockchain-disk:/mnt/blockchain-disk:ro
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - defimon-network

  # Multi-Chain Service (Java 21 + Spring Boot 3.2 + Plugin Architecture)
  multi-chain-service:
    build: ./multi-chain-service
    container_name: multi-chain-service
    ports:
      - "8085:8085"  # API port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MONGODB_URI=mongodb://admin:defimon123@mongodb:27017/multichain?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # - ETHEREUM_RUST_ENGINE_URL=http://ethereum-rust-engine:8086
      - INFURA_PROJECT_ID=${INFURA_PROJECT_ID}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      - BITCOIN_RPC_USERNAME=${BITCOIN_RPC_USERNAME:-defimon}
      - BITCOIN_RPC_PASSWORD=${BITCOIN_RPC_PASSWORD:-defimon123}
    depends_on:
      - kafka
      - mongodb
      - redis
      # - ethereum-rust-engine
    networks:
      - defimon-network
    volumes:
      - /mnt/blockchain-disk:/mnt/blockchain-disk:ro

  # Ethereum Prediction Service (Java 21 + Spring Boot 3.2)
  ethereum-prediction-service:
    build: ./ethereum-prediction-service
    container_name: ethereum-prediction-service
    ports:
      - "8087:8087"  # API port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MONGODB_URI=mongodb://admin:defimon123@mongodb:27017/prediction?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=defimon123
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - REDDIT_API_KEY=${REDDIT_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
      - ALPHAVANTAGE_API_KEY=${ALPHAVANTAGE_API_KEY}
      - DEFILLAMA_API_KEY=${DEFILLAMA_API_KEY}
      - DUNE_API_KEY=${DUNE_API_KEY}
    depends_on:
      - kafka
      - mongodb
      - redis
    networks:
      - defimon-network

  # Enhanced CCXT Exchange Data Service (Python + FastAPI)
  exchange-data-service:
    build: ./exchange-data-service
    container_name: exchange-data-service
    ports:
      - "8089:8089"  # API port
      - "8091:8091"  # Prometheus metrics port
    environment:
      - INFURA_API_KEY=${INFURA_API_KEY}
      - GETBLOCK_URL=${GETBLOCK_URL}
      - HF_TOKEN=${HF_TOKEN}
      - BITCOIN_RPC_USERNAME=${BITCOIN_RPC_USERNAME:-bitcoin}
      - BITCOIN_RPC_PASSWORD=${BITCOIN_RPC_PASSWORD:-ultrafast_archive_node_2024}
      - MONGODB_URI=mongodb://admin:defimon123@mongodb:27017/eth_exchange_data?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=defimon123
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICE_PORT=8089
      - LOG_LEVEL=INFO
      - RATE_LIMIT_ENABLED=true
    depends_on:
      - kafka
      - mongodb
      - redis
    networks:
      - defimon-network

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass defimon123
    volumes:
      - redis_data:/data
    networks:
      - defimon-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./blockchain-sync-service/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - defimon-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=defimon123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./blockchain-sync-service/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./blockchain-sync-service/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - defimon-network

volumes:
  mongodb_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  defimon-network:
    driver: bridge
